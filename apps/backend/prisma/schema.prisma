// Prisma Schema for Super Family Platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                   String                    @id @default(uuid())
  email                    String                    @unique
  phoneNumber              String?
  provider                 String?
  providerId               String?
  name                     String
  address                  String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  FamilyGroups             FamilyGroup[]
  FamilyMembers            FamilyMember[]
  ExtendedFamilyAndFriends ExtendedFamilyAndFriend[]
  UserProgramEnrollments   UserProgram[]
  ProductRecommendations   ProductRecommendation[]
  Orders                   Order[]
  CommunityPosts           CommunityPost[]
  Leaderboard              Leaderboard?
  AIInsights               AIInsight[]
  UserCoachSessions        CoachingSession[]
  RefreshTokens            RefreshToken[]
  Otp                      Otp[]
  Coach                    Coach[]
  SahhaProfiles            SahhaProfiles?
  Comment                  Comment[]
  Activity                 Activity[]
  Sleep                    Sleep[]
  Nutrition                Nutrition[]
  MindfulnessSession       MindfulnessSession[]

  @@unique([provider, providerId])
}

model Otp {
  otpId     String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [userId])
  userId    String   @unique
  otp       String
  expiresAt DateTime
}

model RefreshToken {
  user         User     @relation(fields: [userId], references: [userId])
  userId       String
  refreshToken String   @id
  createdAt    DateTime @default(now())
}

model FamilyGroup {
  familyId      String         @id @default(uuid())
  familyName    String
  adminUser     User           @relation(fields: [adminUserId], references: [userId])
  adminUserId   String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  FamilyMembers FamilyMember[]
}

model FamilyMember {
  memberId  String      @id @default(uuid())
  family    FamilyGroup @relation(fields: [familyId], references: [familyId])
  familyId  String
  user      User        @relation(fields: [userId], references: [userId])
  userId    String
  role      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model ExtendedFamilyAndFriend {
  extendedMemberId String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [userId])
  userId           String
  name             String
  relationship     String
  phoneNumber      String?
  email            String?
  address          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Activity {
  id             String   @id @default(uuid())
  name           String
  user           User     @relation(fields: [userId], references: [userId])
  userId         String
  date           DateTime
  steps          Int?
  activeMinutes  Int
  caloriesBurned Int
}

model Sleep {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [userId])
  userId       String
  date         DateTime
  hoursSlept   Float
  sleepQuality Int
}

model Nutrition {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [userId])
  userId        String
  date          DateTime
  totalCalories Int
  protein       Float
  carbs         Float
  fat           Float
}

model MindfulnessSession {
  id          String   @id @default(uuid())
  name        String
  description String
  user        User     @relation(fields: [userId], references: [userId])
  userId      String
  date        DateTime
  duration    Int
  type        String
}

model Program {
  programId    String        @id @default(uuid())
  programName  String
  description  String?
  durationDays Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  UserProgram  UserProgram[]
}

model UserProgram {
  enrollmentId String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [userId])
  userId       String
  program      Program   @relation(fields: [programId], references: [programId])
  programId    String
  startDate    DateTime?
  endDate      DateTime?
  progress     Float
  status       String    @default("active")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ProductRecommendation {
  recommendationId     String   @id @default(uuid())
  user                 User     @relation(fields: [userId], references: [userId])
  userId               String
  productName          String
  productType          String
  recommendationReason String?
  recommendedAt        DateTime @default(now())
}

model Product {
  id            String      @id @default(uuid())
  name          String
  category      String
  description   String?
  price         Float
  stockQuantity Int
  vendorName    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  OrderItem     OrderItem[]
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [userId])
  userId      String
  totalPrice  Float
  orderStatus String
  orderDate   DateTime    @default(now())
  Shipments   Shipment[]
  OrderItems  OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model Shipment {
  shipmentId     String    @id @default(uuid())
  order          Order     @relation(fields: [orderId], references: [id])
  orderId        String
  trackingNumber String
  carrier        String
  shipmentStatus String
  shippedAt      DateTime?
  deliveredAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model CommunityPost {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [userId])
  userId    String
  postType  String
  content   String
  likes     Int
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id          String        @id @default(uuid())
  post        CommunityPost @relation(fields: [postId], references: [id])
  postId      String
  user        User          @relation(fields: [userId], references: [userId])
  userId      String
  content     String
  commentDate DateTime
}

model Leaderboard {
  leaderboardId String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [userId])
  userId        String   @unique
  score         Int
  ranking       Int
  updatedAt     DateTime @updatedAt
}

model AIInsight {
  insightId          String   @id @default(uuid())
  user               User     @relation(fields: [userId], references: [userId])
  userId             String
  insightDescription String
  insightDate        DateTime @default(now())
}

model Coach {
  id               String            @id @default(uuid())
  user             User              @relation(fields: [userId], references: [userId])
  userId           String
  specialization   String
  bio              String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  coachingSessions CoachingSession[]
}

model CoachingSession {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [userId])
  userId    String
  coach     Coach    @relation(fields: [coachId], references: [id])
  coachId   String
  date      DateTime
  duaration Int
  notes     String?
  createdAt DateTime @default(now())
}

model SahhaProfiles {
  profileId  String   @id
  accountId  String
  externalId String
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [userId])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  realTimeHealthData   RealTimeHealthData[]
  DigitalBiomarkerLogs DigitalBiomarkerLogs[]
  HealthScoreLogs      HealthScoreLogs[]
}

enum RecordingMethod {
  RECORDING_METHOD_ACTIVELY_RECORDED
  RECORDING_METHOD_AUTOMATICALLY_RECORDED
  RECORDING_METHOD_MANUAL_ENTRY
  RECORDING_METHOD_UNKNOWN
}

model RealTimeHealthData {
  id         String    @id @default(uuid())
  externalId String
  logType    String
  dataType   String
  dataLogs   DataLog[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  profileId String
  Sahha     SahhaProfiles? @relation(fields: [profileId], references: [profileId])
}

model DataLog {
  id                   String             @id @default(uuid())
  parentId             String?
  value                Int
  unit                 String
  source               String
  recordingMethod      RecordingMethod
  deviceType           String
  startDateTime        String
  endDateTime          String
  additionalProperties Json?
  realTimeHealthDataId String
  realTimeHealthData   RealTimeHealthData @relation(fields: [realTimeHealthDataId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  receivedAtUtc DateTime
}

model DigitalBiomarkerLogs {
  id            String   @id
  profileId     String
  category      String
  type          String
  periodicity   String
  aggregation   String
  value         String
  unit          String
  valueType     String
  startDateTime DateTime
  endDateTime   DateTime
  createdAtUtc  DateTime
  version       Float

  Sahha SahhaProfiles @relation(fields: [profileId], references: [profileId])
}

model HealthScoreLogs {
  id            String           @id
  profileId     String
  type          HealthScoresType
  state         String
  score         Int
  factors       Json[]
  dataSources   String[]
  scoreDateTime String
  createdAtUtc  DateTime
  version       Int

  Sahha SahhaProfiles @relation(fields: [profileId], references: [profileId])
}

enum HealthScoresType {
  Wellbeing
  Activity
  Sleep
  Depression
  Stress
  Anxiety
}
